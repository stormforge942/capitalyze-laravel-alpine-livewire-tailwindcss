# Stage 1: Set up the PHP environment and Composer dependencies
FROM --platform=linux/amd64 php:8.3-fpm AS php_builder
WORKDIR /app

COPY app/helpers.php /app/app/helpers.php

# Install system dependencies and PHP extensions required for Composer and your application
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    libpq-dev \
    libzip-dev \
    netcat-openbsd \
    postgresql-client \
    brotli
RUN pecl install redis swoole
RUN docker-php-ext-install pdo pdo_pgsql pgsql pdo_mysql mbstring exif pcntl bcmath gd zip
RUN docker-php-ext-enable redis swoole
# Clear cache
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

COPY auth.json /root/.composer/auth.json

# Copy the Composer files and install PHP dependencies
COPY composer.json composer.lock ./
# Get Composer
# Copy the Laravel source code and the vendor directory
COPY . .

COPY --from=composer:latest /usr/bin/composer /usr/bin/composer
RUN composer install --no-dev --optimize-autoloader

# Stage 2: Build the assets with Node.js
FROM node:16 as node_builder
WORKDIR /app
# Now that PHP dependencies are installed, copy them over as needed for the Node.js build
COPY --from=php_builder /app/vendor ./vendor
# Copy package.json and package-lock.json for npm install
COPY package.json package-lock.json ./
# Install Node.js dependencies
RUN npm install
# Copy the rest of your front-end files
COPY resources/ ./resources/
COPY storage/ ./storage/
COPY app/ ./app/
COPY vite.config.js ./
COPY tailwind.config.js ./
COPY postcss.config.js ./
# Run npm run build to build your assets
RUN npm run build

# Stage 3: Final stage to set up the application
FROM php:8.3-fpm
WORKDIR /var/www

# Install system dependencies, PHP extensions, and PostgreSQL client
RUN apt-get update && apt-get install -y \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    libpq-dev \
    postgresql-client \
    nginx \
    cron
RUN pecl install redis swoole
RUN docker-php-ext-install pdo pdo_pgsql pgsql pdo_mysql mbstring exif pcntl bcmath gd
RUN docker-php-ext-enable redis swoole
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Copy the built assets and vendor directory from the previous stages
COPY --from=node_builder /app/public ./public
COPY --from=php_builder /app/vendor ./vendor
COPY --from=php_builder /app ./

# Permissions adjustments, if necessary
RUN usermod -u 1000 www-data && chown -R www-data:www-data .

# Copying .env.production to .env
COPY .env.production ./.env

# Adding debugging commands
RUN ls -la /var/www # List files in /var/www to verify
RUN if [ -f /var/www/artisan ]; then echo "Artisan exists"; else echo "Artisan does NOT exist"; fi

RUN touch crontab.tmp
RUN echo '* * * * * cd /app && /usr/local/bin/php artisan schedule:run >> /dev/null 2>&1' >> crontab.tmp
RUN crontab crontab.tmp
RUN rm -rf crontab.tmp

COPY entrypoint.production.sh /usr/local/bin/entrypoint.sh
COPY entrypoint.production.sh /usr/local/bin/

COPY ./docker/nginx/conf.d /etc/nginx/sites-enabled
RUN rm /etc/nginx/sites-enabled/default

RUN chmod +x /usr/local/bin/entrypoint.sh

# Expose port 9000 and start php-fpm server
EXPOSE 9000

# Set the script as the entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.production.sh"]
CMD ["php-fpm"]

RUN echo "Building production dockerfile"
