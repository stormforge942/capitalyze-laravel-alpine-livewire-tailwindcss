<?php

namespace App\Http\Livewire;

use App\Models\InfoPresentation;
use App\Models\InfoTikrPresentation;
use Carbon\Carbon;
use DateTime;
use Illuminate\Database\ConnectionResolver;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;
use Livewire\Component;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Request;

class CompanyReport extends Component
{
    use TableFiltersTrait;


    public $rows = [];
    public $company;
    public $decimalDisplay = '0';
    public $ticker;
    public $chartData = [];
    public $companyName;
    public $unitType = 'Thousands';
    public $currency = 'USD';
    public $currentRoute;
    public $order = "Latest on the Right";
    public $period;
    public $table;
    public $navbar;
    public $reverse = false;
    public $activeIndex = '';
    public $activeSubIndex = '';
    public $data;
    public $tableDates = [];
    public $rangeDates = [];
    public $noData = false;
    public $tableLoading = true;
    public $cost = null;
    public $dynamic = null;
    public $startDate = null;
    public $endDate = null;
    protected $request;
    protected $rowCount = 0;
    public $selectedRows = [];
    public $selectedValue = [];
    public $chartType = 'line';
    public $isOpen = false;
    public $activeTitle = 'Income Statement';
    public $colors = [];
    public $allRows = [];

    protected $listeners = ['periodChange', 'tabClicked', 'tabSubClicked', 'selectRow', 'unselectRow'];

    protected $queryString = [
        'unitType',
        'reverse',
        'decimalDisplay',
        'view',
    ];

    public function toggleChartType($title)
    {
        if ($this->isOpen === $title) {
            $this->isOpen = null;
        } else {
            $this->isOpen = $title;
        }


    }

    public function fakeDataForRatiosPage() {
        return '{"Return on Assets % (ROA)":{"2022-09-24":["394328000000|33f69d4146d658078ed4534629e3ae265ebe96c5|5b4c88852ee4ed0f161c5f5df8e6e2df63f27478","USD"],"2021-09-25":["365817000000|16f2f8c46a638c1bf124f0ab315922838d60115d|5b4c88852ee4ed0f161c5f5df8e6e2df63f27478","USD"],"2020-09-26":["274515000000|ff4ceb27de7a3782c8b954c610103dfedf624b08|5b4c88852ee4ed0f161c5f5df8e6e2df63f27478","USD"],"2019-09-28":["260174000000|31dd9c4858f8cb47402fcc7137ff1e580bc60f34|5b4c88852ee4ed0f161c5f5df8e6e2df63f27478","USD"],"2018-09-29":["265595000000|580bb9731b305a447edbcc49ca9470e698428b11|5b4c88852ee4ed0f161c5f5df8e6e2df63f27478","USD"],"2017-09-30":["229234000000|070a43872a78e91e350541cf0088824c6d7ebae7|5b4c88852ee4ed0f161c5f5df8e6e2df63f27478","USD"],"2016-09-24":["215639000000|ef3cf258f8c067670381e78f72dee1347211a0b0|5b4c88852ee4ed0f161c5f5df8e6e2df63f27478","USD"],"2015-09-26":["233715000000|50db39b5929b5de2fe045c1fa8e2d15204cf0dec|5b4c88852ee4ed0f161c5f5df8e6e2df63f27478","USD"],"2014-09-27":["182795000000|87da2e0808c67bad9afe5d945136be4825ad02ea|5b4c88852ee4ed0f161c5f5df8e6e2df63f27478","USD"],"2013-09-28":["170910000000|88aee136e2ed2ba40e5f7db828f29f65457fa6e9|5b4c88852ee4ed0f161c5f5df8e6e2df63f27478","USD"]},"Return On Equity % (ROE)":{"2022-09-24":["394328000000|33f69d4146d658078ed4534629e3ae265ebe96c5|38b7f46439e47ca0e1d527e8d99d6b8ec3a0ffe7","USD"],"2021-09-25":["365817000000|16f2f8c46a638c1bf124f0ab315922838d60115d|38b7f46439e47ca0e1d527e8d99d6b8ec3a0ffe7","USD"],"2020-09-26":["274515000000|ff4ceb27de7a3782c8b954c610103dfedf624b08|38b7f46439e47ca0e1d527e8d99d6b8ec3a0ffe7","USD"],"2019-09-28":["260174000000|31dd9c4858f8cb47402fcc7137ff1e580bc60f34|38b7f46439e47ca0e1d527e8d99d6b8ec3a0ffe7","USD"],"2018-09-29":["265595000000|580bb9731b305a447edbcc49ca9470e698428b11|38b7f46439e47ca0e1d527e8d99d6b8ec3a0ffe7","USD"],"2017-09-30":["229234000000|070a43872a78e91e350541cf0088824c6d7ebae7|38b7f46439e47ca0e1d527e8d99d6b8ec3a0ffe7","USD"],"2016-09-24":["215639000000|ef3cf258f8c067670381e78f72dee1347211a0b0|38b7f46439e47ca0e1d527e8d99d6b8ec3a0ffe7","USD"],"2015-09-26":["233715000000|50db39b5929b5de2fe045c1fa8e2d15204cf0dec|38b7f46439e47ca0e1d527e8d99d6b8ec3a0ffe7","USD"],"2014-09-27":["182795000000|87da2e0808c67bad9afe5d945136be4825ad02ea|38b7f46439e47ca0e1d527e8d99d6b8ec3a0ffe7","USD"],"2013-09-28":["170910000000|88aee136e2ed2ba40e5f7db828f29f65457fa6e9|38b7f46439e47ca0e1d527e8d99d6b8ec3a0ffe7","USD"]},"Return on Common Equity %":{"2022-09-24":["7.8%|None|39a6aa259d72cb297df543f2f7c00ba1ba2a47c1","%"],"2021-09-25":["33.3%|None|8889bccf4bb14ac55a454b65f18a003e0a95be7a","%"],"2020-09-26":["5.5%|None|e7dc86e0a8e236794f6a4ef7366a38066003f2d7","%"],"2019-09-28":["(2.0)%|None|4a9c889197590167a4d356c0cd622227a53ef838","%"],"2018-09-29":["15.9%|None|8410d797cf4efc09744c05c4f2f3555396fe7331","%"],"2017-09-30":["6.3%|None|c8481c427697dd8bcf2348fa83f4db2f87a3fe18","%"],"2016-09-24":["(7.7)%|None|1459bf3174e73ad86cea500dee628ad6b38832b2","%"],"2015-09-26":["27.9%|None|8f87353d2d288ab89470bd4fc3e456ff180ae244","%"],"2014-09-27":["7.0%|None|1e567e3f8d271bb89fb08dee6511016b9f7b977d","%"],"2013-09-28":["-|None|1ce18861e1e86dfe5bbdfe765a4d3219e252527e",null]},"Cost of Goods Sold":{"2022-09-24":["-223546000000|51379ea195c583ab101a2185712ed839432d9e74|9ffe45b6069a45b166b56ae27e2a631f2d6e7c5d","USD"],"2021-09-25":["-212981000000|7d1c786eb56c9d6d2174ad801c349a403fc0fd90|9ffe45b6069a45b166b56ae27e2a631f2d6e7c5d","USD"],"2020-09-26":["-169559000000|12b66414ddfabad1936b2344725ac4572779a51f|9ffe45b6069a45b166b56ae27e2a631f2d6e7c5d","USD"],"2019-09-28":["-161782000000|4727040951ad0f6a35a6c9ab001fe339ee4ba38a|9ffe45b6069a45b166b56ae27e2a631f2d6e7c5d","USD"],"2018-09-29":["-163756000000|8f51ebcb791e9c70f805bbbf9f063648e66cd1b2|9ffe45b6069a45b166b56ae27e2a631f2d6e7c5d","USD"],"2017-09-30":["-141048000000|21caf71127e8a69b4192cf76ab3c08a7ed8be382|9ffe45b6069a45b166b56ae27e2a631f2d6e7c5d","USD"],"2016-09-24":["-131376000000|3d0f69c67a40f95bf97d1ceff102b539bea175d1|9ffe45b6069a45b166b56ae27e2a631f2d6e7c5d","USD"],"2015-09-26":["-140089000000|de4b5f9086ed96e9eb1e5f928bed2022e9185600|9ffe45b6069a45b166b56ae27e2a631f2d6e7c5d","USD"],"2014-09-27":["-112258000000|c2b68aa06a591b1e09274881f4e0606d51eb8d1d|9ffe45b6069a45b166b56ae27e2a631f2d6e7c5d","USD"],"2013-09-28":["-106606000000|de98d050bfc13f1fd2f315a46d4161d6fa7343e3|9ffe45b6069a45b166b56ae27e2a631f2d6e7c5d","USD"]},"Gross Profit":{"2022-09-24":["170782000000|93b7ea9ee526278e2979b97089071a02f2bc0a7c|8bd214358e23200266ea78157a2375a1bbfe816a","USD"],"2021-09-25":["152836000000|2804c92d74f32bcda4b8ad8b0abb9b2b3930135c|8bd214358e23200266ea78157a2375a1bbfe816a","USD"],"2020-09-26":["104956000000|982a4ba2445630d7e103ac4744db116beed7e3d2|8bd214358e23200266ea78157a2375a1bbfe816a","USD"],"2019-09-28":["98392000000|13c278245f7d679b22ab720e80be2d1887ffc5b6|8bd214358e23200266ea78157a2375a1bbfe816a","USD"],"2018-09-29":["101839000000|71a9a77670a4390b859dc45634c6470b6edf17da|8bd214358e23200266ea78157a2375a1bbfe816a","USD"],"2017-09-30":["88186000000|a9bb60d7779632da95208e0fa41b25201dd06b91|8bd214358e23200266ea78157a2375a1bbfe816a","USD"],"2016-09-24":["84263000000|ba443a497b66b8b6b79512ab26e8a3aa185796f6|8bd214358e23200266ea78157a2375a1bbfe816a","USD"],"2015-09-26":["93626000000|02cbcbbdb735b7b88015d8bf0d6e7e03c3027020|8bd214358e23200266ea78157a2375a1bbfe816a","USD"],"2014-09-27":["70537000000|ae438001202aedf4058f917386c8715f7f8b00f2|8bd214358e23200266ea78157a2375a1bbfe816a","USD"],"2013-09-28":["64304000000|54c100ffcd59bae2fe20a2e37bd540d80d4bf573|8bd214358e23200266ea78157a2375a1bbfe816a","USD"]},"% Gross Margins":{"2022-09-24":["43.3%|None|25b55ba1e2d2e071be2e5508d36721121fb44628","%"],"2021-09-25":["41.8%|None|da58f0bbf171d47d69868a3c6f1113273b1331fd","%"],"2020-09-26":["38.2%|None|9649bf9c8ce5a44e512e5e2fb2eaf03690322ddc","%"],"2019-09-28":["37.8%|None|f31e68fae294fdd5be36c41d1cd2402d0fa7dbfc","%"],"2018-09-29":["38.3%|None|36e479779fa318844491fd4c52916761dbf9f540","%"],"2017-09-30":["38.5%|None|163237c8f9a3d4d10ac1d2e0eafb85da274f82bb","%"],"2016-09-24":["39.1%|None|7880b87064fa77cb3149f209838fd9fa68444c16","%"],"2015-09-26":["40.1%|None|3f305879d7eb355cb955804e277585db7e65d182","%"],"2014-09-27":["38.6%|None|24d011ee5dc9c90c57fa8cf27c20a34c49e9667e","%"],"2013-09-28":["37.6%|None|c47ec4c91924a617bfe0c19cee483eeb3920c7fb","%"]},"Selling General & Admin Expenses":{"2022-09-24":["(25,094.00)|None|8c77cde0c896f237900d168b72fd086447a9055a",""],"2021-09-25":["(21,973.00)|None|bf55f79a023c0fb09dd86e2343b5c97c1ce816e9",""],"2020-09-26":["(19,916.00)|None|e45293053311b89b95a6cb3056b9a60ba41de3d3",""],"2019-09-28":["(18,245.00)|None|eba35b0e3def3a837950f1b6b238524370d731dc",""],"2018-09-29":["(16,705.00)|None|bfa635113ad465ca8bf9bcafc6e694ec3b94fbb1",""],"2017-09-30":["(15,261.00)|None|d0905cdf0d5ff7edd0eb8ee0818db7a702224a6b",""],"2016-09-24":["(14,194.00)|None|36e5b3c14bead704987eab6f7f1a3e4081467d4b",""],"2015-09-26":["(14,329.00)|None|36321a4b7ba24e6cafa05926f6be944e86b1a7d2",""],"2014-09-27":["(11,993.00)|None|cf108d0338aef43c4e9db25cd0f4b16dbaaebd6a",""],"2013-09-28":["(10,830.00)|None|c5c36b17ddacc8dd87d1802b734f04d0fc540247",""]},"R&D Expenses":{"2022-09-24":["-26251000000|6c1dd49e030ea3590884811c30c3c74d12b8a84c|6bf3d07cc525891d6a2da0e5e351b74983392ca4","USD"],"2021-09-25":["-21914000000|2d73b043e8c719bc3e268ed5956bc6ed3bca8983|6bf3d07cc525891d6a2da0e5e351b74983392ca4","USD"],"2020-09-26":["-18752000000|7f01f8135dbf49a931c64c89f8ca3d4e4eaaf26e|6bf3d07cc525891d6a2da0e5e351b74983392ca4","USD"],"2019-09-28":["-16217000000|1e2fdf97d1347cf1970a06b6bef63a01809254ab|6bf3d07cc525891d6a2da0e5e351b74983392ca4","USD"],"2018-09-29":["-14236000000|b8bf1e66fe66f07442ac2ea6c1a19ff101d8bd1c|6bf3d07cc525891d6a2da0e5e351b74983392ca4","USD"],"2017-09-30":["-11581000000|e07485f9e4ac8b95905d14167f8b4c26f127966e|6bf3d07cc525891d6a2da0e5e351b74983392ca4","USD"],"2016-09-24":["-10045000000|e98db86d5df2f92a06bd62aac4d31f187826f4de|6bf3d07cc525891d6a2da0e5e351b74983392ca4","USD"],"2015-09-26":["-8067000000|7c01ad71c272aed9d1e2453be16865e6197d5679|6bf3d07cc525891d6a2da0e5e351b74983392ca4","USD"],"2014-09-27":["-6041000000|450004145b4d4411713fd8480b73d2f5ac50f67f|6bf3d07cc525891d6a2da0e5e351b74983392ca4","USD"],"2013-09-28":["-4475000000|313b355c06fc73ea1c29a82b39c8d04a3ed16b1b|6bf3d07cc525891d6a2da0e5e351b74983392ca4","USD"]},"Total Operating Expenses":{"2022-09-24":["-51345000000|699182a8e638903212f4b595b19b3796834d51a0|1d75c439ee116136ad0b889f8895c5244247b1de","USD"],"2021-09-25":["-43887000000|0eecadf81693333aba5bedb1762f66c7ab9eefe7|1d75c439ee116136ad0b889f8895c5244247b1de","USD"],"2020-09-26":["-38668000000|795daa73bf0887d9a88abe049114595d84b9c23f|1d75c439ee116136ad0b889f8895c5244247b1de","USD"],"2019-09-28":["-34462000000|86867ede657a42a4fadd3f07469617946b7c9317|1d75c439ee116136ad0b889f8895c5244247b1de","USD"],"2018-09-29":["-30941000000|ad01e515003d90b491ebcfd6e27484b13cc40426|1d75c439ee116136ad0b889f8895c5244247b1de","USD"],"2017-09-30":["-26842000000|81f5197819549816d933f4264be170f1b6c5d601|1d75c439ee116136ad0b889f8895c5244247b1de","USD"],"2016-09-24":["-24239000000|d219268ea314a65bf288de7315566ddf65a5442a|1d75c439ee116136ad0b889f8895c5244247b1de","USD"],"2015-09-26":["-22396000000|32babf66d288f801ba4bf22b17aeb483fd17bb66|1d75c439ee116136ad0b889f8895c5244247b1de","USD"],"2014-09-27":["-18034000000|45776225200f18ca0f5158131583e1aa0ca4a298|1d75c439ee116136ad0b889f8895c5244247b1de","USD"],"2013-09-28":["-15305000000|a15e21008a0075dcc45903994556961297ca9c9a|1d75c439ee116136ad0b889f8895c5244247b1de","USD"]},"Operating Income":{"2022-09-24":["119437000000|2c2d5815bccbe8e297ea43d6c9eb0b88c6cf05ad|a21c6d3ab80c5de9cd7d0e848fbf9d78ce070942","USD"],"2021-09-25":["108949000000|5b098ca7dd3df31e849edba6c3a7aff91b64b696|a21c6d3ab80c5de9cd7d0e848fbf9d78ce070942","USD"],"2020-09-26":["66288000000|81b9383513762f1c4386b77962527dca7e20ebfa|a21c6d3ab80c5de9cd7d0e848fbf9d78ce070942","USD"],"2019-09-28":["63930000000|4a876fe2bfc5d3b4a8db64a120a25f283a6d6716|a21c6d3ab80c5de9cd7d0e848fbf9d78ce070942","USD"],"2018-09-29":["70898000000|331f5976bd1153246458d639bf45b526236da41f|a21c6d3ab80c5de9cd7d0e848fbf9d78ce070942","USD"],"2017-09-30":["61344000000|2e9ea19504eda00311e2d38a62b73d7e86b11603|a21c6d3ab80c5de9cd7d0e848fbf9d78ce070942","USD"],"2016-09-24":["60024000000|95c7da9985b9ed3727393f28518fbc23e5b7645c|a21c6d3ab80c5de9cd7d0e848fbf9d78ce070942","USD"],"2015-09-26":["71230000000|1028ad31b3af435d44a3fb517358e8779657dfc3|a21c6d3ab80c5de9cd7d0e848fbf9d78ce070942","USD"],"2014-09-27":["52503000000|5e6596b4458e8f9176504eece9eb5a5b581ce6c6|a21c6d3ab80c5de9cd7d0e848fbf9d78ce070942","USD"],"2013-09-28":["48999000000|48ff78ba4f63eed23873b481621a66ab9804d00f|a21c6d3ab80c5de9cd7d0e848fbf9d78ce070942","USD"]},"% Operating Margins":{"2022-09-24":["30.3%|None|c1dfc89707458b3b7adcfd7a55de46eb8eaeb589","%"],"2021-09-25":["29.8%|None|becd05a646bcef958d16059307d28d401200b206","%"],"2020-09-26":["24.1%|None|cd48c92247d9a1d95501924c029985161890cb6a","%"],"2019-09-28":["24.6%|None|a9797c5df5e57824b03555ccb4c8597d10cd6502","%"],"2018-09-29":["26.7%|None|56596fbe1ad9855508384316027843f20af57164","%"],"2017-09-30":["26.8%|None|5e08dc537432cc312da1687afc3f929f0d7a9d10","%"],"2016-09-24":["27.8%|None|dd66ffb84f138594356a520b7852a43df47be9ea","%"],"2015-09-26":["30.5%|None|b9f522ec62bf43b7c83830ed948ca493baef4dc5","%"],"2014-09-27":["28.7%|None|c640090f7f434d0f9d02e7c51e7ed7f5d51bdeb0","%"],"2013-09-28":["28.7%|None|e0e6ca8956e1d0ee5c3d96df5700e06df839583a","%"]},"Interest Expense":{"2022-09-24":["-2931000000|626c9ecd833b05c07db12690625f70f173d5d579|332f009e37a6e19cf3cb1e2bd495f17e5c20dfc7","USD"],"2021-09-25":["-2645000000|f04acfbeb4ecb34ce166d693e5dc8522897459a4|332f009e37a6e19cf3cb1e2bd495f17e5c20dfc7","USD"],"2020-09-26":["-2873000000|19c41046c52ffdde45304ce0993b85345c7dd574|332f009e37a6e19cf3cb1e2bd495f17e5c20dfc7","USD"],"2019-09-28":["-3576000000|8516a9f81ee2b9503d9d5cc850b930d9c1d5cbe8|332f009e37a6e19cf3cb1e2bd495f17e5c20dfc7","USD"],"2018-09-29":["-3240000000|b2333fd8465b4fb6a7cb78b33f839a706f6149ff|332f009e37a6e19cf3cb1e2bd495f17e5c20dfc7","USD"],"2017-09-30":["-2323000000|3642177b1d0bf364713fe195f5ddeb25ca98902b|332f009e37a6e19cf3cb1e2bd495f17e5c20dfc7","USD"],"2016-09-24":["-1456000000|6c4d2612a82d0449fb0c0114a1f02911bac8f425|332f009e37a6e19cf3cb1e2bd495f17e5c20dfc7","USD"],"2015-09-26":["-733000000|21009af376e2a5ff478c7bced6e9e0a3d7daa729|332f009e37a6e19cf3cb1e2bd495f17e5c20dfc7","USD"],"2014-09-27":["-384000000|dc51ec7418fce478770ec4e483ed4a3ef9470a8f|332f009e37a6e19cf3cb1e2bd495f17e5c20dfc7","USD"],"2013-09-28":["-136000000|668fc318706513c71b065a3c77a5d750c2a41822|332f009e37a6e19cf3cb1e2bd495f17e5c20dfc7","USD"]},"Interest And Investment Income":{"2022-09-24":["2825000000|f43a1826cf1a8bf24bd8034e5e5f8c79dccf4121|a18efd748224106d523a893e7639843b11dfa544","USD"],"2021-09-25":["2843000000|d4aa899665e5e3589e144c16d6f859789185b1ea|a18efd748224106d523a893e7639843b11dfa544","USD"],"2020-09-26":["3763000000|b9e0e0739e8fd90c4db8e59b8d26dcc6a056b31b|a18efd748224106d523a893e7639843b11dfa544","USD"],"2019-09-28":["4961000000|c0ed4af071bed30dcedbf227d5f165193adee0ca|a18efd748224106d523a893e7639843b11dfa544","USD"],"2018-09-29":["5686000000|a8700df10c9cd352bcd843e0ab0d50803fec14c3|a18efd748224106d523a893e7639843b11dfa544","USD"],"2017-09-30":["5201000000|f22eea6c5b25cdb6544ec23837f8715920715a22|a18efd748224106d523a893e7639843b11dfa544","USD"],"2016-09-24":["3999000000|332fa42bb27c6cf193dd408fcedee5516b9c7491|a18efd748224106d523a893e7639843b11dfa544","USD"],"2015-09-26":["2921000000|501ad1faba71dcab85e6dddee1b183990297cd63|a18efd748224106d523a893e7639843b11dfa544","USD"],"2014-09-27":["1795000000|5f2e0b5db5565a69c3025a7cdfc5dfd976882227|a18efd748224106d523a893e7639843b11dfa544","USD"],"2013-09-28":["1616000000|b52b10e222386fe678c49e064610dc2243debb46|a18efd748224106d523a893e7639843b11dfa544","USD"]},"Currency Exchange Gains (Loss)":[],"Other Non Operating Income (Expenses)":{"2022-09-24":["-228000000|7aae3af6f3a4637f8d444ce1ad58077e363c11fa|fb861c6c6826c5a87a6284f4a486cdc6b4d0c4de","USD"],"2021-09-25":["60000000|9b4e812aadec8ba27aa3b4558024dee9295d29ed|fb861c6c6826c5a87a6284f4a486cdc6b4d0c4de","USD"],"2020-09-26":["-87000000|902f0d044042fb03a25ded7eda8c5980bbba19fe|fb861c6c6826c5a87a6284f4a486cdc6b4d0c4de","USD"],"2019-09-28":["422000000|87d6b66d2d4a2dc46697774d9e626db8c5e28977|fb861c6c6826c5a87a6284f4a486cdc6b4d0c4de","USD"],"2018-09-29":["-441000000|bf7a05041a28a92c3370392757808dfb623b46b6|fb861c6c6826c5a87a6284f4a486cdc6b4d0c4de","USD"],"2017-09-30":["-133000000|7a49507bf7b3b99f968c2deb4d2ced0810a74acf|fb861c6c6826c5a87a6284f4a486cdc6b4d0c4de","USD"],"2016-09-24":["-1195000000|62ad9e2c639a1c69e9fa8ad045ef0437faad7067|fb861c6c6826c5a87a6284f4a486cdc6b4d0c4de","USD"],"2015-09-26":["-903000000|ed90408f432351a2a809fb168a89ac566d57f11a|fb861c6c6826c5a87a6284f4a486cdc6b4d0c4de","USD"],"2014-09-27":["-431000000|71705bdef8d02c193b1ae3d929cee546ca565071|fb861c6c6826c5a87a6284f4a486cdc6b4d0c4de","USD"],"2013-09-28":["-324000000|81c59d06fe70b9d0584e3e08e602060dee691b52|fb861c6c6826c5a87a6284f4a486cdc6b4d0c4de","USD"]},"EBT Excl. Unusual Items":{"2022-09-24":["119103000000|5975c07049d8d2c87ee42c0d7eeb03b726f05331|65f574815332c7bad80d8c13e5f7a3f02cc53494","USD"],"2021-09-25":["109207000000|fb5fcfb1ac1530b28e0f88054ff740e4e74dca69|65f574815332c7bad80d8c13e5f7a3f02cc53494","USD"],"2020-09-26":["67091000000|f012c367e68ac5c040c62b3c1a35abc89d34e2d5|65f574815332c7bad80d8c13e5f7a3f02cc53494","USD"],"2019-09-28":["65737000000|793015a0639a025d845c62e1a981595a897429b3|65f574815332c7bad80d8c13e5f7a3f02cc53494","USD"],"2018-09-29":["72903000000|81099a262dd2feffa47b09c08550c5a8828f7d3e|65f574815332c7bad80d8c13e5f7a3f02cc53494","USD"],"2017-09-30":["64089000000|6953d1f29dd59e11028f31ea9d95e772af245279|65f574815332c7bad80d8c13e5f7a3f02cc53494","USD"],"2016-09-24":["61372000000|666febba212f2c92e6746994a96d194dfcb7942e|65f574815332c7bad80d8c13e5f7a3f02cc53494","USD"],"2015-09-26":["72515000000|44a780aa563cd06e811a9a4c7e1d9e71c9ed1e54|65f574815332c7bad80d8c13e5f7a3f02cc53494","USD"],"2014-09-27":["53483000000|1da055ade39b0a7b93aaa9ebbe1d8e81f8d9ce64|65f574815332c7bad80d8c13e5f7a3f02cc53494","USD"],"2013-09-28":["50155000000|5efaf4fb27f7dc822dfae3516c4742f8b4483266|65f574815332c7bad80d8c13e5f7a3f02cc53494","USD"]},"Merger & Restructuring Charges":[],"Gain (Loss) On Sale Of Investments":[],"In Process R&D Expenses":[],"EBT Incl. Unusual Items":{"2022-09-24":["119103000000|5975c07049d8d2c87ee42c0d7eeb03b726f05331|97744b46a5f9ceb92ae267887135242d0711ee86","USD"],"2021-09-25":["109207000000|fb5fcfb1ac1530b28e0f88054ff740e4e74dca69|97744b46a5f9ceb92ae267887135242d0711ee86","USD"],"2020-09-26":["67091000000|f012c367e68ac5c040c62b3c1a35abc89d34e2d5|97744b46a5f9ceb92ae267887135242d0711ee86","USD"],"2019-09-28":["65737000000|793015a0639a025d845c62e1a981595a897429b3|97744b46a5f9ceb92ae267887135242d0711ee86","USD"],"2018-09-29":["72903000000|81099a262dd2feffa47b09c08550c5a8828f7d3e|97744b46a5f9ceb92ae267887135242d0711ee86","USD"],"2017-09-30":["64089000000|6953d1f29dd59e11028f31ea9d95e772af245279|97744b46a5f9ceb92ae267887135242d0711ee86","USD"],"2016-09-24":["61372000000|666febba212f2c92e6746994a96d194dfcb7942e|97744b46a5f9ceb92ae267887135242d0711ee86","USD"],"2015-09-26":["72515000000|44a780aa563cd06e811a9a4c7e1d9e71c9ed1e54|97744b46a5f9ceb92ae267887135242d0711ee86","USD"],"2014-09-27":["53483000000|1da055ade39b0a7b93aaa9ebbe1d8e81f8d9ce64|97744b46a5f9ceb92ae267887135242d0711ee86","USD"],"2013-09-28":["50155000000|5efaf4fb27f7dc822dfae3516c4742f8b4483266|97744b46a5f9ceb92ae267887135242d0711ee86","USD"]},"Income Tax Expense":{"2022-09-24":["-19300000000|f14308af64bfaeae205907847149d98c88828424|449909345b109497b9ede85629a7529658343b54","USD"],"2021-09-25":["-14527000000|f42203dd34a82c0d81c354cf2bd4e3f1ca7a8249|449909345b109497b9ede85629a7529658343b54","USD"],"2020-09-26":["-9680000000|9cddcf4588a287c616674785224ddcfab58d209c|449909345b109497b9ede85629a7529658343b54","USD"],"2019-09-28":["-10481000000|21accf83ee9ce0642977b77a6890c13a0a27e86e|449909345b109497b9ede85629a7529658343b54","USD"],"2018-09-29":["-13372000000|7d1ddfac93312249c94e59a9ee4bbb4695646a0b|449909345b109497b9ede85629a7529658343b54","USD"],"2017-09-30":["-15738000000|0f6eb9ec8f87e9d5151a9aa0432edb7a4ffe3688|449909345b109497b9ede85629a7529658343b54","USD"],"2016-09-24":["-15685000000|fa70c68bc691ffda6ad8484420f12df07b111d28|449909345b109497b9ede85629a7529658343b54","USD"],"2015-09-26":["-19121000000|5cefcb5ed50aa94059683f131ae42b6cb7ba9da9|449909345b109497b9ede85629a7529658343b54","USD"],"2014-09-27":["-13973000000|8764a7b1cb7e488d42d967ccb1494adba4024d6d|449909345b109497b9ede85629a7529658343b54","USD"],"2013-09-28":["-13118000000|b6864084db8e1b236355ed2695c200fb61874d86|449909345b109497b9ede85629a7529658343b54","USD"]},"Earnings From Continuing Operations":{"2022-09-24":["99803000000|64c97b1c0d3c83a9a38806ed818bef8d3c5d40ef|34dbda0f7bc609761d1df33a0425af50cfb4b7aa",""],"2021-09-25":["94680000000|38994f6b0a6131f51e728e012626ea50aaf70d50|34dbda0f7bc609761d1df33a0425af50cfb4b7aa",""],"2020-09-26":["57411000000|baa60c941972eeea674c5bcec499761bdbd38197|34dbda0f7bc609761d1df33a0425af50cfb4b7aa",""],"2019-09-28":["55256000000|4c4a17141118cdc25a947d27686fc03a393ec790|34dbda0f7bc609761d1df33a0425af50cfb4b7aa",""],"2018-09-29":["59531000000|31aa1bc8ee32f671f7d8b7f0991d7d99d0bef692|34dbda0f7bc609761d1df33a0425af50cfb4b7aa",""],"2017-09-30":["48351000000|8ab34fac11077489961a305a22ba8b5194bd2355|34dbda0f7bc609761d1df33a0425af50cfb4b7aa",""],"2016-09-24":["45687000000|37eb7db88280cb89c88b8c3fd4de9372bd8778c1|34dbda0f7bc609761d1df33a0425af50cfb4b7aa",""],"2015-09-26":["53394000000|11cfd64d18b81fe877a4bb768d64e78707374bec|34dbda0f7bc609761d1df33a0425af50cfb4b7aa",""],"2014-09-27":["39510000000|396528a1a72ed61d2c70516ff085af7c4a236213|34dbda0f7bc609761d1df33a0425af50cfb4b7aa",""],"2013-09-28":["37037000000|4ead9a5f73567a73abb08ac703e5b8083f7932a9|34dbda0f7bc609761d1df33a0425af50cfb4b7aa",""]},"Extraordinary Item & Accounting Change":[],"Net Income to Company":{"2022-09-24":["99803000000|64c97b1c0d3c83a9a38806ed818bef8d3c5d40ef|a8664bd026b16bc529af7215b74ac342e2c49bee",""],"2021-09-25":["94680000000|38994f6b0a6131f51e728e012626ea50aaf70d50|a8664bd026b16bc529af7215b74ac342e2c49bee",""],"2020-09-26":["57411000000|baa60c941972eeea674c5bcec499761bdbd38197|a8664bd026b16bc529af7215b74ac342e2c49bee",""],"2019-09-28":["55256000000|4c4a17141118cdc25a947d27686fc03a393ec790|a8664bd026b16bc529af7215b74ac342e2c49bee",""],"2018-09-29":["59531000000|31aa1bc8ee32f671f7d8b7f0991d7d99d0bef692|a8664bd026b16bc529af7215b74ac342e2c49bee",""],"2017-09-30":["48351000000|8ab34fac11077489961a305a22ba8b5194bd2355|a8664bd026b16bc529af7215b74ac342e2c49bee",""],"2016-09-24":["45687000000|37eb7db88280cb89c88b8c3fd4de9372bd8778c1|a8664bd026b16bc529af7215b74ac342e2c49bee",""],"2015-09-26":["53394000000|11cfd64d18b81fe877a4bb768d64e78707374bec|a8664bd026b16bc529af7215b74ac342e2c49bee",""],"2014-09-27":["39510000000|396528a1a72ed61d2c70516ff085af7c4a236213|a8664bd026b16bc529af7215b74ac342e2c49bee",""],"2013-09-28":["37037000000|4ead9a5f73567a73abb08ac703e5b8083f7932a9|a8664bd026b16bc529af7215b74ac342e2c49bee",""]},"Net Income":{"2022-09-24":["99803000000|64c97b1c0d3c83a9a38806ed818bef8d3c5d40ef|bc856e989b00436761a6d266351b060a3fd242f7",""],"2021-09-25":["94680000000|38994f6b0a6131f51e728e012626ea50aaf70d50|bc856e989b00436761a6d266351b060a3fd242f7",""],"2020-09-26":["57411000000|baa60c941972eeea674c5bcec499761bdbd38197|bc856e989b00436761a6d266351b060a3fd242f7",""],"2019-09-28":["55256000000|4c4a17141118cdc25a947d27686fc03a393ec790|bc856e989b00436761a6d266351b060a3fd242f7",""],"2018-09-29":["59531000000|31aa1bc8ee32f671f7d8b7f0991d7d99d0bef692|bc856e989b00436761a6d266351b060a3fd242f7",""],"2017-09-30":["48351000000|8ab34fac11077489961a305a22ba8b5194bd2355|bc856e989b00436761a6d266351b060a3fd242f7",""],"2016-09-24":["45687000000|37eb7db88280cb89c88b8c3fd4de9372bd8778c1|bc856e989b00436761a6d266351b060a3fd242f7",""],"2015-09-26":["53394000000|11cfd64d18b81fe877a4bb768d64e78707374bec|bc856e989b00436761a6d266351b060a3fd242f7",""],"2014-09-27":["39510000000|396528a1a72ed61d2c70516ff085af7c4a236213|bc856e989b00436761a6d266351b060a3fd242f7",""],"2013-09-28":["37037000000|4ead9a5f73567a73abb08ac703e5b8083f7932a9|bc856e989b00436761a6d266351b060a3fd242f7",""]},"Net Income to Common Incl Extra Items":{"2022-09-24":["99803000000|64c97b1c0d3c83a9a38806ed818bef8d3c5d40ef|f2964b7b8a1ccfb498ed50e7b88770b12053a495",""],"2021-09-25":["94680000000|38994f6b0a6131f51e728e012626ea50aaf70d50|f2964b7b8a1ccfb498ed50e7b88770b12053a495",""],"2020-09-26":["57411000000|baa60c941972eeea674c5bcec499761bdbd38197|f2964b7b8a1ccfb498ed50e7b88770b12053a495",""],"2019-09-28":["55256000000|4c4a17141118cdc25a947d27686fc03a393ec790|f2964b7b8a1ccfb498ed50e7b88770b12053a495",""],"2018-09-29":["59531000000|31aa1bc8ee32f671f7d8b7f0991d7d99d0bef692|f2964b7b8a1ccfb498ed50e7b88770b12053a495",""],"2017-09-30":["48351000000|8ab34fac11077489961a305a22ba8b5194bd2355|f2964b7b8a1ccfb498ed50e7b88770b12053a495",""],"2016-09-24":["45687000000|37eb7db88280cb89c88b8c3fd4de9372bd8778c1|f2964b7b8a1ccfb498ed50e7b88770b12053a495",""],"2015-09-26":["53394000000|11cfd64d18b81fe877a4bb768d64e78707374bec|f2964b7b8a1ccfb498ed50e7b88770b12053a495",""],"2014-09-27":["39510000000|396528a1a72ed61d2c70516ff085af7c4a236213|f2964b7b8a1ccfb498ed50e7b88770b12053a495",""],"2013-09-28":["37037000000|4ead9a5f73567a73abb08ac703e5b8083f7932a9|f2964b7b8a1ccfb498ed50e7b88770b12053a495",""]},"% Net Income to Common Incl Extra Items Margins":{"2022-09-24":["25.3%|None|93007f77eb11350294d78a622f2212ef5107d526","%"],"2021-09-25":["25.9%|None|79f18400a8845004b03c8cbf5f84e2d479be2501","%"],"2020-09-26":["20.9%|None|827239e50d47df992b71064ac9b1a14cbd96d773","%"],"2019-09-28":["21.2%|None|3afdab9c888dedd238ec5aa6bc87024ed2f074cf","%"],"2018-09-29":["22.4%|None|548f3467bada008dcaaf455320e4af4e72116314","%"],"2017-09-30":["21.1%|None|5368f035c7400c21f8f7664ea5cd71bc30091f2e","%"],"2016-09-24":["21.2%|None|6032cc885b20f9e7c489b0269eef57cb27de1020","%"],"2015-09-26":["22.8%|None|b17ed62a0bd16c3575bd7091154fd8a8edf54a5c","%"],"2014-09-27":["21.6%|None|5453cfff6f1022981bf4137529e7ddd709a67022","%"],"2013-09-28":["21.7%|None|7ed13c04bb2ed9580abf6c13122063a473e91845","%"]},"Net Income to Common Excl. Extra Items":{"2022-09-24":["99803000000|64c97b1c0d3c83a9a38806ed818bef8d3c5d40ef|595d98846b8f91a470c99830172c3c01968ef05e",""],"2021-09-25":["94680000000|38994f6b0a6131f51e728e012626ea50aaf70d50|595d98846b8f91a470c99830172c3c01968ef05e",""],"2020-09-26":["57411000000|baa60c941972eeea674c5bcec499761bdbd38197|595d98846b8f91a470c99830172c3c01968ef05e",""],"2019-09-28":["55256000000|4c4a17141118cdc25a947d27686fc03a393ec790|595d98846b8f91a470c99830172c3c01968ef05e",""],"2018-09-29":["59531000000|31aa1bc8ee32f671f7d8b7f0991d7d99d0bef692|595d98846b8f91a470c99830172c3c01968ef05e",""],"2017-09-30":["48351000000|8ab34fac11077489961a305a22ba8b5194bd2355|595d98846b8f91a470c99830172c3c01968ef05e",""],"2016-09-24":["45687000000|37eb7db88280cb89c88b8c3fd4de9372bd8778c1|595d98846b8f91a470c99830172c3c01968ef05e",""],"2015-09-26":["53394000000|11cfd64d18b81fe877a4bb768d64e78707374bec|595d98846b8f91a470c99830172c3c01968ef05e",""],"2014-09-27":["39510000000|396528a1a72ed61d2c70516ff085af7c4a236213|595d98846b8f91a470c99830172c3c01968ef05e",""],"2013-09-28":["37037000000|4ead9a5f73567a73abb08ac703e5b8083f7932a9|595d98846b8f91a470c99830172c3c01968ef05e",""]},"% Net Income to Common Excl. Extra Items Margins":{"2022-09-24":["25.3%|None|9e6a825b73bc0e7715d0c68db62efc5675bf8f47","%"],"2021-09-25":["25.9%|None|77c3e409ffaea983fe854deba1e24fdc6e3dd98f","%"],"2020-09-26":["20.9%|None|bc7a68894c5a888359c445518a98d1bca329ef41","%"],"2019-09-28":["21.2%|None|d97f4c1ac8fde74b4a335c57a71a6ba89c1ea3b5","%"],"2018-09-29":["22.4%|None|6297f17146799f9bac44567c69dee7977a3aee69","%"],"2017-09-30":["21.1%|None|8d6c07e0322f57d5f7a8031ef6871111b3d29636","%"],"2016-09-24":["21.2%|None|eccf74bc11275af2481debc2ee0a7a00e496f40b","%"],"2015-09-26":["22.8%|None|ef0a63094252ad78cbbdc83b37d270b05a9270e2","%"],"2014-09-27":["21.6%|None|8e98fa6d70b37fcf4710681441dd540a067af843","%"],"2013-09-28":["21.7%|None|140253d4fea305bd354831ad329807eb4cba0d63","%"]},"Diluted EPS Excl Extra Items":{"2022-09-24":["6.11|b321c8920cab417b7d89987da6f2958cc37638b8|3465d85ecd2c7c9d4a5f3377de4a02169eb1d976","USD\/Shares"],"2021-09-25":["5.61|32a8aa765b519f6d2fac3200d1f20f736d140f33|3465d85ecd2c7c9d4a5f3377de4a02169eb1d976","USD\/Shares"],"2020-09-26":["3.28|1040b138155aefe0c206ae52a6d60069230fa352|3465d85ecd2c7c9d4a5f3377de4a02169eb1d976","USD\/Shares"],"2019-09-28":["2.9725|4108cb1b9eb70b04ea1f6f576790e750c82df7c1|3465d85ecd2c7c9d4a5f3377de4a02169eb1d976","USD\/Shares"],"2018-09-29":["2.9775|6dd7973eb9fe45befe5b63fe308a148c786d8fde|3465d85ecd2c7c9d4a5f3377de4a02169eb1d976","USD\/Shares"],"2017-09-30":["2.3025|3baeb28bf8d28082291aec74bd004b7efa454303|3465d85ecd2c7c9d4a5f3377de4a02169eb1d976","USD\/Shares"],"2016-09-24":["2.0775|80f1a2cb78348913b89de8b850267710e421fa5c|3465d85ecd2c7c9d4a5f3377de4a02169eb1d976","USD\/Shares"],"2015-09-26":["2.305|bf7d0e7074a644d6cf5453e59a7941f9571d40c1|3465d85ecd2c7c9d4a5f3377de4a02169eb1d976","USD\/Shares"],"2014-09-27":["1.6125|44983df9a153a33ac53cfdc59b74c611994726c4|3465d85ecd2c7c9d4a5f3377de4a02169eb1d976","USD\/Shares"],"2013-09-28":["0.20285694000020285|a2f5b6a011630c7d502155ba28f007cc31df7a32|3465d85ecd2c7c9d4a5f3377de4a02169eb1d976","USD\/Shares"]},"Weighted Average Diluted Shares Outstanding":{"2022-09-24":["16325819000.0|ce186fedd5cfaad5dfece8dc333444de029ade4d|e89243a9ebb61abc9616eb84e909c95847811ed4","Shares"],"2021-09-25":["16864919000.0|565c0ec05931e4a734f2a00d029e644e4573189a|e89243a9ebb61abc9616eb84e909c95847811ed4","Shares"],"2020-09-26":["17528214000.0|e697c5830b0b733021ad29a9cee12486d7dcf0cb|e89243a9ebb61abc9616eb84e909c95847811ed4","Shares"],"2019-09-28":["18595652000.0|db9a8a1cd92409d564950da950f06f52a52bdcee|e89243a9ebb61abc9616eb84e909c95847811ed4","Shares"],"2018-09-29":["20000436000.0|16dc58f17794a175e1841255bb57f9c758e633ce|e89243a9ebb61abc9616eb84e909c95847811ed4","Shares"],"2017-09-30":["21006768000.0|401b51655ffce24b9f5300fcae69012eaa7d474e|e89243a9ebb61abc9616eb84e909c95847811ed4","Shares"],"2016-09-24":["22001124000.0|a5056d77a216b5102ce1b7fdd4b06c55f385f283|e89243a9ebb61abc9616eb84e909c95847811ed4","Shares"],"2015-09-26":["23172276000.0|8ec1b4806ffd1cd1241459af2ac38cb36e4d2cfa|e89243a9ebb61abc9616eb84e909c95847811ed4","Shares"],"2014-09-27":["24490652000.0|6cdcb2c371d0a4c1dcddf1147f3d871ed98a7bee|e89243a9ebb61abc9616eb84e909c95847811ed4","Shares"],"2013-09-28":["182605934605.752|b72b4962152a484dd02772e766d81e9a2a64b775|e89243a9ebb61abc9616eb84e909c95847811ed4","Shares"]},"Weighted Average Basic Shares Outstanding":{"2022-09-24":["16215963000.0|a623f799a17863bdd3a16eae9f64e621f9af3fc7|38ee2c7063ad55f8d45c54d45227717a67c1282c","Shares"],"2021-09-25":["16701272000.0|da007c2876b432cb082e26209baa77f3d9e1fd0c|38ee2c7063ad55f8d45c54d45227717a67c1282c","Shares"],"2020-09-26":["17352119000.0|43e0ce36b07556f17b61aaf5955c53df2d880c17|38ee2c7063ad55f8d45c54d45227717a67c1282c","Shares"],"2019-09-28":["18471336000.0|dcf63f4f48847585161ceac4b501ebcbf7a043df|38ee2c7063ad55f8d45c54d45227717a67c1282c","Shares"],"2018-09-29":["19821508000.0|1c9f3633498c6f38a469d3887aac2394f7718bd3|38ee2c7063ad55f8d45c54d45227717a67c1282c","Shares"],"2017-09-30":["20868968000.0|0caf464e2e97797b2e83920c726d6f4bd06de82d|38ee2c7063ad55f8d45c54d45227717a67c1282c","Shares"],"2016-09-24":["21883280000.0|c3fbcf91220db78e4704e242d623719e90db5543|38ee2c7063ad55f8d45c54d45227717a67c1282c","Shares"],"2015-09-26":["23013684000.0|2c78907121a09df4157be1028b7842f38ddc0a01|38ee2c7063ad55f8d45c54d45227717a67c1282c","Shares"],"2014-09-27":["24342288000.0|abc9c01fc49344691cb0da702580c643cab2fe7e|38ee2c7063ad55f8d45c54d45227717a67c1282c","Shares"],"2013-09-28":["181365141364.96|4ed918b2ffa78122a7b6e13868bcf8e43735b539|38ee2c7063ad55f8d45c54d45227717a67c1282c","Shares"]},"Dividends Per Share":{"2022-09-24":["-|None|93e4ae71edf9d5e17b46673ff05f167bc2589723",null],"2021-09-25":["-|None|93e4ae71edf9d5e17b46673ff05f167bc2589723",null],"2020-09-26":["-|None|93e4ae71edf9d5e17b46673ff05f167bc2589723",null],"2019-09-28":["-|None|93e4ae71edf9d5e17b46673ff05f167bc2589723",null],"2018-09-29":["-|None|93e4ae71edf9d5e17b46673ff05f167bc2589723",null],"2017-09-30":["0.50|617de09ac3f8079e2d1bc8be320d2d6be78c8d53|93e4ae71edf9d5e17b46673ff05f167bc2589723","num:percentItemType"],"2016-09-24":["0.50|21b083bb1e1c6a0de91f1402cc07dfb6837ff884|93e4ae71edf9d5e17b46673ff05f167bc2589723","num:percentItemType"],"2015-09-26":["0.50|88cd24e774eeba20525e9743b91032769d730c4e|93e4ae71edf9d5e17b46673ff05f167bc2589723","num:percentItemType"],"2014-09-27":["0.50|6926c639130eb50859c04db36e261c5813877c49|93e4ae71edf9d5e17b46673ff05f167bc2589723","num:percentItemType"],"2013-09-28":["0.50|8f3233ce8f0fb799ae51ffca93386bbbf2bbe7ac|93e4ae71edf9d5e17b46673ff05f167bc2589723","num:percentItemType"]},"Payout Ratio %":{"2022-09-24":["-|None|afe34b6ef992b4a22c26172f12a0b9c86d7336a1",null],"2021-09-25":["-|None|733e37fcd52650e901c089c449f9df32effa9e6d",null],"2020-09-26":["-|None|ed45c64c304ab5ceb07694d21bd49b951085f15a",null],"2019-09-28":["-|None|661da8dcb044d9b37b77eac145f45bf42007bfa8",null],"2018-09-29":["-|None|6d7a0719a3aadce5f3ae4af48c5514770738a98d",null],"2017-09-30":["21.7%|None|3f988f2a313f5ee17163741b8822b4b19462f7aa","%"],"2016-09-24":["24.1%|None|8765690a8f554245b162cbd4b6bb4518e41e03da","%"],"2015-09-26":["21.7%|None|f9a5b4f2458925cf82a3bae11fc7989e0cdf6f30","%"],"2014-09-27":["31.0%|None|3167b9c5484aeaa84acba8e3936c356b1b1e7b4d","%"],"2013-09-28":["246.5%|None|e265a1463eff0b0fa2b1b37239ffc8e1d42ca460","%"]},"Basic EPS":{"2022-09-24":["6.15|6e71ce2110f7993b16930421086c066e5e1285c3|3dcbabc2aec8c0c5e1f67ddb6a6c6bed7d4ae7b1","USD\/Shares"],"2021-09-25":["5.67|e002ac5485ccbecbdcfa3d6b8af47030f9041a4d|3dcbabc2aec8c0c5e1f67ddb6a6c6bed7d4ae7b1","USD\/Shares"],"2020-09-26":["3.31|c369b7b2c7279aae490be17d5dfcf708792ee966|3dcbabc2aec8c0c5e1f67ddb6a6c6bed7d4ae7b1","USD\/Shares"],"2019-09-28":["2.9925|b31ddbfb79315589bf9d6035367e1ebb112f757c|3dcbabc2aec8c0c5e1f67ddb6a6c6bed7d4ae7b1","USD\/Shares"],"2018-09-29":["3.0025|fd5ee94a8b6dda5200c633a1054783a55ae89f4f|3dcbabc2aec8c0c5e1f67ddb6a6c6bed7d4ae7b1","USD\/Shares"],"2017-09-30":["2.3175|424238dbe938351131bac40eb1218ba4ebf2ca9b|3dcbabc2aec8c0c5e1f67ddb6a6c6bed7d4ae7b1","USD\/Shares"],"2016-09-24":["2.0875|fe569782f223726cc8a4ab78ec20fc1f1e9de274|3dcbabc2aec8c0c5e1f67ddb6a6c6bed7d4ae7b1","USD\/Shares"],"2015-09-26":["2.32|2284ed1154d88aea616a095f8a252685ee0878ba|3dcbabc2aec8c0c5e1f67ddb6a6c6bed7d4ae7b1","USD\/Shares"],"2014-09-27":["1.6225|932689fb1a4c41d6c71366833a8a1f1c77ff3bd4|3dcbabc2aec8c0c5e1f67ddb6a6c6bed7d4ae7b1","USD\/Shares"],"2013-09-28":["0.20428551000020428|e0ff151d2c5f69feb74be666d107f4e99e70cd60|3dcbabc2aec8c0c5e1f67ddb6a6c6bed7d4ae7b1","USD\/Shares"]},"EBITDA":{"2022-09-24":["128,137.00|None|9c7beb25c86788f50f5156e638a05668bd62e5a8",""],"2021-09-25":["118,449.00|None|f3d2e166691b26b31ad9dd2acefe222aea32f551",""],"2020-09-26":["75,988.00|None|cfa56c867c80cda52b6bf37796c025dc0ebea8b5",""],"2019-09-28":["75,230.00|None|a47366145e1e0e8a0160ec57b0d5790e889ec483",""],"2018-09-29":["80,198.00|None|117e8756f7302db7a3d450c8d8214b7e208e0db5",""],"2017-09-30":["71,501.00|None|f62658bf989244fe99d19f807658a4b232db2201",""],"2016-09-24":["70,529.00|None|1e6d4611b895fc5e43247b86a630670df0fe869e",""],"2015-09-26":["82,487.00|None|01c0dc48795652af74022057fafcb5485b78e538",""],"2014-09-27":["60,449.00|None|c8a5d2bffc0dd5e7951cac1b38821bd85ab423bb",""],"2013-09-28":["55,756.00|None|1ab11cc971d9b5041e6c92d1892f3daf5a1a566e",""]},"EBITDAR":{"2022-09-24":["-|None|9317e7b229f44cc09f5b8133fe507f665fef58fa",null],"2021-09-25":["-|None|4bba2e6b5a6afb08c294a70b0319b4e915d92fbd",null],"2020-09-26":["-|None|f3149206bcc7d3c92356a388682d8ee4638d89d3",null],"2019-09-28":["-|None|a028ed22f4a81660c3296e2dba2c0011475ecead",null],"2018-09-29":["-|None|a8bf75aef408baff1304ac634897e79b1dd1db84",null],"2017-09-30":["-|None|b7e1e759d7740ef8b723f23e5f3dc8b5be4a7ea8",null],"2016-09-24":["-|None|d215f735d6ba6238d3ef42f501477c0f107b6c82",null],"2015-09-26":["-|None|d71d98b39456ba699187da743c0c8a7065173fae",null],"2014-09-27":["-|None|e37705c306dc0ac4aea96f3b12c8e33c67f21fec",null],"2013-09-28":["-|None|4393356906dd84c0c40bc0866c8525651b13e547",null]},"R&D Expense":{"2022-09-24":["-|None|50773cf68af8319e3cf382e60964ac02b5b604d7",null],"2021-09-25":["-|None|50773cf68af8319e3cf382e60964ac02b5b604d7",null],"2020-09-26":["-|None|50773cf68af8319e3cf382e60964ac02b5b604d7",null],"2019-09-28":["-|None|50773cf68af8319e3cf382e60964ac02b5b604d7",null],"2018-09-29":["-|None|50773cf68af8319e3cf382e60964ac02b5b604d7",null],"2017-09-30":["11581000000|e2ae07e9ec0ca3d1ebdb7ca2bdc1782ba0a916c0|50773cf68af8319e3cf382e60964ac02b5b604d7",""],"2016-09-24":["10045000000|cc64a6027787ba1428133228fec38790e9d09fd4|50773cf68af8319e3cf382e60964ac02b5b604d7",""],"2015-09-26":["8067000000|bb2018dbebcea14fadc568f486626356df399754|50773cf68af8319e3cf382e60964ac02b5b604d7",""],"2014-09-27":["6041000000|32c60a412e7cf8d277041add087977300baad18c|50773cf68af8319e3cf382e60964ac02b5b604d7",""],"2013-09-28":["4475000000|d860eb655d7ff85ecde7b4aeb4087b82ea76d014|50773cf68af8319e3cf382e60964ac02b5b604d7",""]},"Selling and Marketing Expense":{"2013-09-28":["1100000000|da925b96efcdaf0ce3aa17872e6982bc488df7b7|a1736beb15d0682c8329f0fc0bffa844e980a9a4","USD"]},"Effective Tax Rate %":{"2022-09-24":["16.2%|None|564b4c0b7206192c8769b7b6d34e9284f5510930","%"],"2021-09-25":["13.3%|None|cd550350fbb4a7085084480f4f0bb5622594d0a2","%"],"2020-09-26":["14.4%|None|f84d3614589b73431910e296b54a6e5d47f47ab2","%"],"2019-09-28":["15.9%|None|907d912a69d9c48a020b6c2f4cb74f9184d45fb8","%"],"2018-09-29":["18.3%|None|0d184af937b5d658056aedcb667d2200f2dc40e3","%"],"2017-09-30":["24.6%|None|d2b4e560843703dff80e701c8d0144385720bef2","%"],"2016-09-24":["25.6%|None|92e2f97d16f4af1cdc64dfedf586fc572eef2cff","%"],"2015-09-26":["26.4%|None|b019a4a23e6f851165616f4301962446b4833b1e","%"],"2014-09-27":["26.1%|None|89b7095a4d16253793e8abe14b10d6dc52bc53e7","%"],"2013-09-28":["26.2%|None|03bcfa1cb0e1fd2828c9bc7fb1c6460dceff0dd2","%"]}}';
    }

    public function selectRow($title, $data)
    {
        if (count($this->selectedRows) < 5) {
            $this->selectedRows[$title]['dates'] = $data;
            $this->selectedRows[$title]['type'] = 'line';
            $this->selectedRows[$title]['color'] = $this->colors[count($this->selectedRows) - 1];
        }

        $this->generateChartData();
        $this->emit('initCompanyReportChart');
    }

    public function regenerateTableChart(): void
    {
        $this->generateUI();
    }

    public function unselectRow($title)
    {
        unset($this->selectedRows[$title]);

        if (in_array($title, $this->selectedRows)) {
            $this->emit('resetSelection', $title);
        }

        if (count($this->selectedRows)) {
            $this->generateChartData(true);
        } else {
            $this->chartData = [];
            $this->emit('hideCompanyReportChart');
        }
    }

    public function toggleReverse()
    {
        $this->reverse = !$this->reverse;
        $this->regenerateTableChart();
    }

    public function changeChartType($title, $type)
    {
        $this->selectedRows[$title]['type'] = $type;

        $this->chartType = $type;

        $this->generateChartData();
    }

    public function generateChartData($initChart = false): void
    {
        $chartData = [];
        foreach ($this->selectedRows as $title => $row) {
            $data = [];
            foreach ($row['dates'] as $key => $cell) {

                if (!$cell['empty']) {
                    $selectedYear = date('Y', strtotime($cell['date']));
                    $startYear = !is_numeric($this->startDate) ? date('Y', strtotime($this->startDate)) : $this->startDate;
                    $endYear = !is_numeric($this->endDate) ? date('Y', strtotime($this->endDate)) : $this->endDate;
                    if(!($selectedYear < $startYear) && !($selectedYear > $endYear)) {
                        $data[] = [
                            'y' => $cell['value'],
                            'x' => $cell['date'],
                        ];
                    }
                } else {
                    $data[] = [
                        'y' => null,
                        'x' => null,
                    ];
                }
            }
            $chartData[] = [
                'data' => $data,
                'type' => $row['type'],
                'label' => $title,
                'borderColor' => $row['color'],
                'pointRadius' => 1,
                'pointHoverRadius' => 8,
                'tension' => 0.5,
                'fill' => true,
                'pointHoverBorderColor' => '#fff',
                'pointHoverBorderWidth' => 4,
                'pointHoverBackgroundColor' => 'rgba(104, 104, 104, 0.87)'
            ];
        }

        $this->chartData = $chartData;

        $this->emit('initCompanyReportChart');
        if ($initChart) {
        }
    }

    public function getData()
    {
        $acronym = ($this->period == 'annual') ? 'arf5drs' : 'qrf5drs';

        $defaultConnectionName = DB::getDefaultConnection();
        $defaultConnectionResolver = new ConnectionResolver();
        $defaultConnectionResolver->addConnection(
            $defaultConnectionName,
            DB::connection($defaultConnectionName),
        );
        $defaultConnectionResolver->setDefaultConnection($defaultConnectionName);

        $remoteConnectionName = 'pgsql-xbrl';
        $remoteConnectionResolver = new ConnectionResolver();
        $remoteConnectionResolver->addConnection(
            $remoteConnectionName,
            DB::connection($remoteConnectionName),
        );
        $remoteConnectionResolver->setDefaultConnection($remoteConnectionName);

        DB::setDefaultConnection($remoteConnectionName);
        Model::setConnectionResolver($remoteConnectionResolver);

        if ($this->view === 'Standardised Template') {
            $query = InfoTikrPresentation::query()
                ->where('ticker', '=', $this->ticker)
                ->select('info')->value('info');
        } else {
            $query = InfoPresentation::query()
                ->where('ticker', '=', $this->ticker)
                ->where('acronym', '=', $acronym)
                ->where('id', '=', $this->activeSubIndex)
                ->select('info')->value('info');
        }

        if ($this->activeTitle === 'Ratios') {
            $query = $this->fakeDataForRatiosPage();
        }

        Model::setConnectionResolver($defaultConnectionResolver);
        DB::setDefaultConnection($defaultConnectionName);

        $data = json_decode($query, true);

        // handle period is not set by default we put it to annual
        $this->period ?? $this->period = 'annual';

        // adjust data in case of standardised template and annual period or quarterly period since both are combined in one array
        $data = ($this->view === 'Standardised Template') ? ($this->period === 'annual' ? $data['annual'] : $data['quarter']) : $data;

        $this->data = $data;
        $this->generateUI();
    }

    public function closeChart()
    {
        $this->chartData = [];
        $this->selectedRows = [];
        $this->emit('hideCompanyReportChart');
    }

    public function changeDates($dates)
    {
        $this->tableLoading = true;
        $this->rows = [];

        $this->startDate = $dates[0];
        $this->endDate = $dates[1];

        if ($this->period === 'annual') {
            if (count($dates) == 2) {
                $this->tableDates = [];

                if (gettype($dates[0]) === 'integer') {
                    $date = new DateTime($dates[0] . '-01-01');
                    $dates[0] = $date->format('Y-m-d');
                }

                if (gettype($dates[1]) === 'integer') {
                    $date = new DateTime($dates[1] . '-12-31');
                    $dates[1] = $date->format('Y-m-d');
                }

                // filter tableDates to only keep the selected date from the slider
                $this->tableDates = array_values(array_unique(array_filter($this->rangeDates, function ($date) use ($dates){
                    $timestamp = strtotime($date);
                    $startTimestamp = strtotime($dates[0]);
                    $endTimestamp = strtotime($dates[1]);

                    return $timestamp !== false && $timestamp >= $startTimestamp && $timestamp <= $endTimestamp;
                })));

            }
        }

        if ($this->period === 'quarterly') {

            $this->tableDates = []; // Clears the array

            // get all dates possibles and fill tableDates
            $this->traverseArray($this->data);

            $this->tableDates = array_reverse($this->tableDates);

            if (count($dates) == 2) {

                if (gettype($dates[0]) === 'integer') {
                    $date = new DateTime($dates[0] . '-01-01');
                    $dates[0] = $date->format('Y-m-d');
                }

                if (gettype($dates[1]) === 'integer') {
                    $date = new DateTime($dates[1] . '-12-31');
                    $dates[1] = $date->format('Y-m-d');
                }

                // filter tableDates to only keep the selected date from the slider
                $this->tableDates = array_values(array_unique(array_filter($this->tableDates, function ($date) use ($dates){
                    $timestamp = strtotime($date);
                    $startTimestamp = strtotime($dates[0]);
                    $endTimestamp = strtotime($dates[1]);

                    return $timestamp !== false && $timestamp >= $startTimestamp && $timestamp <= $endTimestamp;
                })));
            }
        }

        $this->generateRows($this->data);

        if (count($this->selectedRows)) {
            $this->generateChartData();
            $this->emit('initCompanyReportChart');
        }
        $this->tableLoading = false;
    }

    public function generateUI(): void
    {
        $this->generateTableDates();
        $this->generateRows($this->data);
    }

    function traverseArray($array)
    {
        foreach ($array as $key => $value) {
            if (is_array($value)) {
                if (strtotime($key) !== false) {
                    if(!in_array(date('Y-m-d', strtotime($key)), $this->tableDates)) {
                        $this->tableDates[] = date('Y-m-d', strtotime($key));
                    }
                }
                $this->traverseArray($value);
            } else {
                break;
            }
        }
    }

    public function generateTableDates()
    {

        $this->tableDates = []; // Clears the array

        // get all dates possibles and fill tableDates
        $this->traverseArray($this->data);

        $this->tableDates = array_reverse($this->tableDates);

            // for the slider date - rangeDates is slider dates
        $this->rangeDates = $this->tableDates;


        // Check and update $this->endDate if applicable
        if (isset($this->endDate) && is_integer($this->endDate)) {
            // Extract the year from $this->endDate
            $year = date('Y', strtotime("{$this->endDate}-01-01"));

            // Search for a date within $this->rangeDates that matches the year
            foreach ($this->rangeDates as $date) {
                if (substr($date, 0, 4) == $year) {
                    $this->endDate = $date;
                }
            }
        }

        // Check and update $this->startDate if applicable
        if (isset($this->startDate) && is_integer($this->startDate)) {
            // Extract the year from $this->startDate
            $year = $this->startDate;

            // Flag to check if a match is found in $this->rangeDates
            $matchFound = false;

            // Search for a date within $this->rangeDates that matches the year
            foreach ($this->rangeDates as $date) {
                if (substr($date, 0, 4) == $year) {
                    $this->startDate = $date;
                    $matchFound = true;
                    break;
                }
            }

            // If no match is found, use $this->rangeDates[count($this->rangeDates) - 7] because year is before the first year in $this->rangeDates
            if (!$matchFound) {

                $year = substr($this->rangeDates[count($this->rangeDates) - 1], 0, 4) - 5;

                // Search for a date within $this->rangeDates that matches the year
                foreach ($this->rangeDates as $date) {
                    if (substr($date, 0, 4) == $year) {
                        $this->startDate = $date;
                        break;
                    }
                }
            }
        }


        // define selected date for the slider
        if (count($this->rangeDates) > 0) {

            $firstDate = $this->startDate;
            if($this->startDate === null) {

                $year = substr($this->rangeDates[count($this->rangeDates) - 1], 0, 4) - 5;

                $firstDate = $this->rangeDates[count($this->rangeDates) - 1];
                // Search for a date within $this->rangeDates that matches the year
                foreach ($this->rangeDates as $date) {
                    if (substr($date, 0, 4) == $year) {
                        $firstDate = $date;
                        break;
                    }
                }

            }



            $this->selectedValue = [$firstDate, $this->rangeDates[count($this->rangeDates) - 1]];
        }

        // if the end date is null than define the maximum date of the slider
        $this->selectedValue[1] = $this->endDate ?? $this->rangeDates[count($this->rangeDates) - 1];

        $this->endDate = $this->endDate ?? $this->selectedValue[1];
        $this->startDate = $this->startDate ?? $this->selectedValue[0];


                // filter tableDates to only keep the selected date from the slider
        $this->tableDates = array_values(array_unique(array_filter($this->tableDates, function ($date) {
            $timestamp = strtotime($date);
            $startTimestamp = strtotime($this->selectedValue[0]);
            $endTimestamp = strtotime($this->selectedValue[1]);

            return $timestamp !== false && $timestamp >= $startTimestamp && $timestamp <= $endTimestamp;
        })));

        if($this->period === 'quarterly') {
            $filteredData = [];

            foreach ($this->rangeDates as $date) {
                $year = date('Y', strtotime($date));

                // Only keep the latest date for each year
                if (!isset($filteredData[$year]) || $date > $filteredData[$year]) {
                    $filteredData[$year] = $date;
                }
            }

            // $filteredData now contains one date per year (the latest if possible)
            $this->rangeDates = array_values($filteredData);
        }
    }

    public function generateRows($data)
    {
        $this->tableLoading = true;
        $rows = [];
        $allRows = [];

        if ($this->view !== 'Standardised Template') {
            if (
                isset($data['Income Statement']) &&
                is_array($data['Income Statement']) &&
                isset($data['Income Statement']['Statement']) &&
                is_array($data['Income Statement']['Statement']) &&
                isset($data['Income Statement']['Statement']['Statement'])
            ) {
                $data = $data['Income Statement']['Statement']['Statement'];
            }

            if (
                isset($data['Statement of Financial Position']) &&
                is_array($data['Statement of Financial Position'])
            ) {
                $data = $data['Statement of Financial Position'];
            }

            if (
                isset($data['Statement of Cash Flows']) &&
                is_array($data['Statement of Cash Flows'])
            ) {
                $data = $data['Statement of Cash Flows'];
            }
        }

        if ($this->view === 'Standardised Template') {
            foreach ($this->navbar[$this->activeIndex] as $tab) {
                if ($tab['id'] === $this->activeSubIndex) {
                    $data = match ($tab['title']) {
                        'Income Statement' => $data['Income Statement'],
                        'Balance Sheet Statement' => $data['Balance Sheet'],
                        'Cash Flow Statement' => $data['Cash Flow Statement'],
                        default => $data
                    };
                }
            }
        }

        foreach ($data as $key => $value) {
            $rowArray = $this->generateRow($value, $key);
            $rows[] = $rowArray[0];
            $allRows[] =$rowArray[1];

        }

        $this->rows = $rows;
        $this->allRows = $allRows;
        $this->tableLoading = false;
    }

    public function generateRow($data, $title, $isSegmentation = false): array
    {
        $row = [
            'title' => $title,
            'segmentation' => false,
            'values' => $this->generateEmptyCellsRow(),
            'children' => [],
        ];
        $allrow = [
            'title' => $title,
            'segmentation' => false,
            'values' => $this->generateEmptyCellsRow(),
            'children' => [],
        ];

        foreach ($data as $key => $value) {
            $isDate = true;
            try {
                Carbon::createFromFormat('Y-m-d', $key);
            } catch (\Exception $e) {
                $isDate = false;
            }

            if ($isDate) {
                $year = Carbon::createFromFormat('Y-m-d', $key)->format('Y-m');

                foreach ($this->tableDates as $date) {
                    $datePart = substr($date, 0, 7);
                    if ($datePart == $year) {
                        $row['values'][$date] = $this->parseCell($value, $key);
                        break;
                    }
                }
                foreach ($this->rangeDates as $date) {
                    $datePart = substr($date, 0, 7);
                    if ($datePart == $year) {
                        $allrow['values'][$date] = $this->parseCell($value, $key);
                        break;
                    }
                }
            } else {
                if (in_array($key, ['#segmentation'])) {
                    foreach ($value as $sKey => $sValue) {
                        $keyn = array_keys($value[$sKey])[0];
                        $valuen = $sValue[$keyn];
                        $keynn = array_keys($valuen)[0];
                        $valuenn = $valuen[$keynn];
                        $row['children'][] = $this->generateRow($valuenn, $keynn, true)[0];
                        $allrow['children'][] = $this->generateRow($valuenn, $keynn, true)[1];
                    }
                } else {
                    $row['children'][] = $this->generateRow($value, $key, $isSegmentation)[0];
                    $allrow['children'][] = $this->generateRow($value, $key, $isSegmentation)[1];
                }
            }

        }

        $row['segmentation'] = $isSegmentation && count($row['children']) === 0;
        $row['id'] = serialize($row);
        $allrow['segmentation'] = $isSegmentation && count($allrow['children']) === 0;
        $allrow['id'] = serialize($allrow);

        return [$row, $allrow];
    }

    public function generatePresent($value)
    {
        $unitType = $this->unitType;
        $units = [
            'Thousands' => 'T',
            'Millions' => 'M',
            'Billions' => 'B',
        ];

        $decimalDisplay = intval($this->decimalDisplay);

        if (str_contains($value, '%') || $value == '-' || !is_numeric($value)) {
            return $value;
        }
        if ($value <= 100 && $value > -1000) {
            return round($value, 2);
        }

        if (str_contains($value, '.') || str_contains($value, ',')) {
            $float = floatval(str_replace(',', '', $value));

            $value = intval($float);
        }

        if (!isset($units[$unitType])) {
            return $value;
        }

        $unitAbbreviation = $units[$unitType];

        // Determine the appropriate unit based on the number
        if ($unitAbbreviation == 'B') {
            return $value / 1000000000;
        } elseif ($unitAbbreviation == 'M') {
            return $value / 1000000;
        } elseif ($unitAbbreviation == 'T') {
            return $value / 1000;
        } else {
            return $value;
        }
    }

    public function parseCell($data, $key): array
    {
        $response = [];
        $response['empty'] = false;
        $response['date'] = $key;
        $response['ticker'] = $this->ticker;

        foreach ($data as $key => $value) {
            if (in_array('|', str_split($value))) {
                $array = explode('|', $value);

                $response['value'] = $this->generatePresent($array[0]);
                $response['present'] = $this->generatePresent($array[0]);
                $response['hash'] = $array[1];

                if (array_key_exists(2, $array)) {
                    $response['secondHash'] = $array[2];
                }

            } else {
                $response[$key] = $value;
            }
        }

        return $response;
    }

    public function generateEmptyCellsRow(): array
    {
        $response = [];

        foreach ($this->tableDates as $date) {
            $response[$date] = [
                'date' => Carbon::createFromFormat('Y-m-d', $date)->format('Y-m-d'),
                'value' => '',
                'hash' => '',
                'ticker' => $this->ticker,
                'empty' => true,
            ];
        }

        return $response;
    }

    public function updated($propertyName): void
    {
        if (
            $propertyName === 'unitType'
            || $propertyName === 'reverse'
            || $propertyName === 'decimalDisplay'
        ) {
            $this->regenerateTableChart();
        }

        if ($propertyName === 'view') {
            $this->getData();
            $this->traverseArray($this->allRows);
        }

    }

    public function updatedPeriod()
    {
        $this->getData();
    }

    public function getNavbar()
    {
        $navbar = [];
        $acronym = ($this->period == 'annual') ? 'arf5drs' : 'qrf5drs';
        $source = 'info_presentations';
        $query = DB::connection('pgsql-xbrl')
            ->table($source)
            ->where('ticker', '=', $this->ticker)
            ->where('acronym', '=', $acronym)
            ->select('statement', 'statement_group', 'id', 'title')->get();

        $collection = $query->collect();

        foreach ($collection as $value) {
            if ($value->title === 'Income Statement') {
                $navbar[$value->statement_group][0] = ['statement' => $value->statement, 'id' => $value->id, 'title' => $value->title];
            }

            if ($value->title === 'Balance Sheet Statement') {
                $navbar[$value->statement_group][1] = ['statement' => $value->statement, 'id' => $value->id, 'title' => $value->title];
            }

            if ($value->title === 'Cash Flow Statement') {
                $navbar[$value->statement_group][2] = ['statement' => $value->statement, 'id' => $value->id, 'title' => $value->title];
            }

            $navbar[$value->statement_group][3] = ['statement' => '', 'id' => 101, 'title' => 'Ratios'];

        }
        if ($navbar === []) {
            $this->noData = true;
            return;
        }

        $this->activeIndex = 'Financial Statements [Financial Statements]';
        $this->activeSubIndex = $navbar[$this->activeIndex][0]['id'];
        $this->navbar = $navbar;

        $this->emit('navbarUpdated', $this->navbar, $this->activeIndex, $this->activeSubIndex);
    }

    public function mount(Request $request, $company, $ticker, $period)
    {

        $first = DB::connection('pgsql-xbrl')
        ->table('eod_prices')
        ->where('symbol', strtolower($this->ticker))
        ->latest('date')->first()?->adj_close;

        $this->cost =  $first;

        $this->colors = [
            "#000000","#454545","#5e5e5e","#636363","#7a7a7a","#878787","#7a7e94","#5d6074","#4d5060","#3d404c","#4f5263"
        ];


        $previous = DB::connection('pgsql-xbrl')
        ->table('eod_prices')
        ->where('symbol', strtolower($this->ticker))
        ->latest('date')
        ->skip(1)->first()?->adj_close;

        if ($previous && $first) {
            $this->dynamic = round((($first - $previous) / $previous) * 100, 2);
        }

        $this->emit('periodChange', 'annual');
        $this->company = $company;
        $this->ticker = $ticker;
        $this->period = $period;
        $this->companyName = $this->ticker;
        $companyData = @json_decode($this->company, true);
        if ($companyData && count($companyData) && is_array($companyData) && array_key_exists('name', $companyData))
            $this->companyName = $companyData['name'];
        $this->getNavbar();
        if ($this->noData === true) {
            return;
        }
        $this->getData();
        if (!$this->currentRoute) {
            $this->currentRoute = $request->route()->getName();
        }

        $this->emit('getTicker', $ticker);

    }

    public function periodChange($period)
    {
        $this->period = $period;
        $this->getNavbar();
        $this->getData();
    }

    public function tabClicked($key)
    {
        $this->activeIndex = $key;
        $this->getData();
    }

    public function tabSubClicked($title)
    {
        $this->activeTitle = $title;

        foreach ($this->navbar[$this->activeIndex] as $nav) {
            if ($nav['title'] === $title) {
                $this->activeSubIndex = $nav['id'];
            }
        }

        $this->getData();
    }

    public function render()
    {
        return view('livewire.company-report');
    }
}
