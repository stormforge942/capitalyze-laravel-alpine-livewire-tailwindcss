name: Docker Deployment
on:
  push:
    branches:
      - development
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Setup AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_GLOBAL_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_GLOBAL_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Create .env.production file
      - name: Create .env.production file
        run: |
          echo APP_DEBUG=${{ secrets.APP_DEBUG }} >> .env.production
          echo APP_ENV=${{ secrets.APP_ENV }} >> .env.production
          echo APP_KEY=${{ secrets.APP_KEY }} >> .env.production
          echo APP_NAME=${{ secrets.APP_NAME }} >> .env.production
          echo APP_URL=${{ secrets.APP_URL }} >> .env.production
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env.production
          echo AWS_BUCKET=${{ secrets.AWS_BUCKET }} >> .env.production
          echo AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }} >> .env.production
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env.production
          echo AWS_USE_PATH_STYLE_ENDPOINT=${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }} >> .env.production
          echo BASE_URL=${{ secrets.BASE_URL }} >> .env.production
          echo BROADCAST_DRIVER=${{ secrets.BROADCAST_DRIVER }} >> .env.production
          echo CACHE_DRIVER=${{ secrets.CACHE_DRIVER }} >> .env.production
          echo DB_CONNECTION=${{ secrets.DB_CONNECTION }} >> .env.production
          echo DB_DATABASE=${{ secrets.DB_DATABASE }} >> .env.production
          echo DB_DATABASE_XBRL=${{ secrets.DB_DATABASE_XBRL }} >> .env.production
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env.production
          echo DB_HOST_XBRL=${{ secrets.DB_HOST_XBRL }} >> .env.production
          echo DB_LOG=${{ secrets.DB_LOG }} >> .env.production
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env.production
          echo DB_PASSWORD_XBRL=${{ secrets.DB_PASSWORD_XBRL }} >> .env.production
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env.production
          echo DB_PORT_XBRL=${{ secrets.DB_PORT_XBRL }} >> .env.production
          echo DB_USERNAME=${{ secrets.DB_USERNAME }} >> .env.production
          echo DB_USERNAME_XBRL=${{ secrets.DB_USERNAME_XBRL }} >> .env.production
          echo FILESYSTEM_DISK=${{ secrets.FILESYSTEM_DISK }} >> .env.production
          echo LOG_CHANNEL=${{ secrets.LOG_CHANNEL }} >> .env.production
          echo LOG_DEPRECATIONS_CHANNEL=${{ secrets.LOG_DEPRECATIONS_CHANNEL }} >> .env.production
          echo LOG_LEVEL=${{ secrets.LOG_LEVEL }} >> .env.production
          echo MAIL_DRIVER=${{ secrets.MAIL_DRIVER }} >> .env.production
          echo MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }} >> .env.production
          echo MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }} >> .env.production
          echo MAIL_MAILER=${{ secrets.MAIL_MAILER }} >> .env.production
          echo QUEUE_CONNECTION=${{ secrets.QUEUE_CONNECTION }} >> .env.production
          echo REDIS_CLUSTER=${{ secrets.REDIS_CLUSTER }} >> .env.production
          echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env.production
          echo REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} >> .env.production
          echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> .env.production
          echo SESSION_DRIVER=${{ secrets.SESSION_DRIVER }} >> .env.production
          echo SESSION_LIFETIME=${{ secrets.SESSION_LIFETIME }} >> .env.production

      # Login to AWS ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 475344884420.dkr.ecr.us-east-1.amazonaws.com

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Build and Push Docker image
      - name: Build and push Docker image
        run: |
          docker-compose -f docker-compose.production.yml build
          docker tag capitalyze:latest 475344884420.dkr.ecr.us-east-1.amazonaws.com/capitalyze-app:latest
          docker push 475344884420.dkr.ecr.us-east-1.amazonaws.com/capitalyze-app:latest

      # Notify completion
      - name: Notify Deployment Completion
        run: echo "Docker image has been successfully built and pushed to AWS ECR."
