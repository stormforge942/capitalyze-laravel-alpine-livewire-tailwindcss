name: Docker Deployment
on:
  push:
    branches:
      - development
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Setup AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_GLOBAL_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_GLOBAL_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Login to AWS ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 475344884420.dkr.ecr.us-east-1.amazonaws.com

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Build and Push Docker image
      - name: Build and push Docker image
        run: |
          docker-compose -f docker-compose.production.yml build \
            --build-arg APP_DEBUG="${{ secrets.APP_DEBUG }}" \
            --build-arg APP_ENV="${{ secrets.APP_ENV }}" \
            --build-arg APP_KEY="${{ secrets.APP_KEY }}" \
            --build-arg APP_NAME="${{ secrets.APP_NAME }}" \
            --build-arg APP_URL="${{ secrets.APP_URL }}" \
            --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --build-arg AWS_BUCKET="${{ secrets.AWS_BUCKET }}" \
            --build-arg AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" \
            --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --build-arg AWS_USE_PATH_STYLE_ENDPOINT="${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}" \
            --build-arg BASE_URL="${{ secrets.BASE_URL }}" \
            --build-arg BROADCAST_DRIVER="${{ secrets.BROADCAST_DRIVER }}" \
            --build-arg CACHE_DRIVER="${{ secrets.CACHE_DRIVER }}" \
            --build-arg DB_CONNECTION="${{ secrets.DB_CONNECTION }}" \
            --build-arg DB_DATABASE="${{ secrets.DB_DATABASE }}" \
            --build-arg DB_DATABASE_XBRL="${{ secrets.DB_DATABASE_XBRL }}" \
            --build-arg DB_HOST="${{ secrets.DB_HOST }}" \
            --build-arg DB_HOST_XBRL="${{ secrets.DB_HOST_XBRL }}" \
            --build-arg DB_LOG="${{ secrets.DB_LOG }}" \
            --build-arg DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            --build-arg DB_PASSWORD_XBRL="${{ secrets.DB_PASSWORD_XBRL }}" \
            --build-arg DB_PORT="${{ secrets.DB_PORT }}" \
            --build-arg DB_PORT_XBRL="${{ secrets.DB_PORT_XBRL }}" \
            --build-arg DB_USERNAME="${{ secrets.DB_USERNAME }}" \
            --build-arg DB_USERNAME_XBRL="${{ secrets.DB_USERNAME_XBRL }}" \
            --build-arg FILESYSTEM_DISK="${{ secrets.FILESYSTEM_DISK }}" \
            --build-arg LOG_CHANNEL="${{ secrets.LOG_CHANNEL }}" \
            --build-arg LOG_DEPRECATIONS_CHANNEL="${{ secrets.LOG_DEPRECATIONS_CHANNEL }}" \
            --build-arg LOG_LEVEL="${{ secrets.LOG_LEVEL }}" \
            --build-arg MAIL_DRIVER="${{ secrets.MAIL_DRIVER }}" \
            --build-arg MAIL_FROM_ADDRESS="${{ secrets.MAIL_FROM_ADDRESS }}" \
            --build-arg MAIL_FROM_NAME="${{ secrets.MAIL_FROM_NAME }}" \
            --build-arg MAIL_MAILER="${{ secrets.MAIL_MAILER }}" \
            --build-arg QUEUE_CONNECTION="${{ secrets.QUEUE_CONNECTION }}" \
            --build-arg REDIS_CLUSTER="${{ secrets.REDIS_CLUSTER }}" \
            --build-arg REDIS_HOST="${{ secrets.REDIS_HOST }}" \
            --build-arg REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
            --build-arg REDIS_PORT="${{ secrets.REDIS_PORT }}" \
            --build-arg SESSION_DRIVER="${{ secrets.SESSION_DRIVER }}" \
            --build-arg SESSION_LIFETIME="${{ secrets.SESSION_LIFETIME }}"
          docker tag capitalyze:latest 475344884420.dkr.ecr.us-east-1.amazonaws.com/capitalyze-app:latest
          docker push 475344884420.dkr.ecr.us-east-1.amazonaws.com/capitalyze-app:latest

      # Notify completion
      - name: Notify Deployment Completion
        run: echo "Docker image has been successfully built and pushed to AWS ECR."
